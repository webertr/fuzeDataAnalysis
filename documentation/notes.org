
* Notes

This is a framework to analysis mdsplus data on the fuze experiment. It also includes some analysis code for a digital holographic inteferometer.


* DHI Analysis

** Reconstruction

To perform the reconstruction, first, a fresnel transformation is taken of each of the two images (images with and without a plasma).


---- Fresnel Transformation ----

The fresnel transformation starts by applying hyperbolic filter to the image. This filter will first apply a smoothing function across each row, then apply the same smoothing function down each column. There is a smoothing parameter for this, called the hyperbolicWin (defaults to 8).

Then, you multiply the image by the complex "chirp" function, and the reference beam (which is just 1.0).

Then, you perform a 2D FFT (done by a series of 1D FFT's in the C code using the GSL). The result is then has the upper left and lower right quadrants exchanged, and then the upper right and lower left quadrants exchanged. The result is the a complex matrix that represents the complex wave amplitude of the holographic reconstruction.

----------------------------------


At this point, you simply find the phase difference between the complex wave amplitudes of the holographic reconstructions with and without plasma. Then, you extract the section that corresponds to the 1st order, object wave (virtual or conjugate/diverging). The phase difference in this extracted image now represents the phase shift of the laser beam caused by the presence of the plasma.

Then, a reducing procedure is performed, where every "sampleInterval"th element is sampled and placed into a new matrix that is smaller in size.


---- Smoothing and Unwrapping Procedure -----

After that, this new, smaller, reduced size matrix representing the phase, is smoothed over and unwrapped together. This first step involves taking the sine and cosine of the phase angle. 

Then, a simple box car smoothing procedure is applied to the sine and cosine of the phase angle. This box car smooth width is set by the "boxCarSmoothWidth" parameter. The returned matrix after the box car smoothing will be smaller, because the edges that don't contain enough points for an average and will be discarded. 

Then, the smoothed sine and cosine matrices will be used to re-generate the phase, in a new, slightly smaller phase matrix. 

Finally, that new phase matrix is "unwrapped". The unwrapping procedure goes through first each column, then each row. The procedure will look for phase jumps then a threshold, set by "unwrapThresh" (defaults to 1.0 x pi), and add or subtract 2pi, depending on the sign of the jump. This will account for phase transitions that go outside of the -pi -> +pi domain of the atan function. 

At this point, the unwrapped and smoothed phase matrix has the maximum value subtracted from it at all points. This creates a zero baseline that all phases are referenced to. Later, a +1/-1 will be mulitplied by the phase when converting to density.

-----------------------------------------------


Finally, the phase is converted to plasma density by a simple formula. This matrix is now the line integrated plasma density.





** Abel Inversion

Now, the line integrated plasma density must be converted to plasma number density. This procedure is more complicated.

It will iterate through each column, which is meant to be in an orientation where the column runs in the y-direction, or perpendicular to the z-direction, the direction of the pinch. For each column, it will do the following:


------- Each Column Iteration ---------

It will pick the center to be the maximum value in the column. It will use this center value to divide the column up into a "Left" and "Right" line integrated profile. The "Left" profile is 0 -> the center value.

Then, it will iterate this center value from -"centroidNum" to +"centroidNum" around the maximum value (set to 10). For each center value, it will do the following:


------- Each Value for the "Center" ---------

It will start by dividing up the column into a "Left" and "Right" line integrated profile. The left line integrated profile is starting at the 0th pixel and increments up, while the right line integrated profile starts at the last pixel and increments down.

Then, it will subtract the minimum value from both the "Left" and "Right" line integrated profile.

Then, it will invert each "Left" and "Right" line integrated profile, to obtain a "Left" and "Right" density profile.

At this point, it will try to determine an approriate density offset for the smaller of the two profiles. To do this, it will iterate through a number of different density offsets determined by the parameters "deltaN" (set to 5E21) and "offsetIter" (set to 15). It will apply these offsets to the smaller radial density profile, and determine the sum of the square of the differences between the smaller profile, and the truncated larger profile. It will then find the density offset that minimizes this sum. This will be the density offset that it applies to the smaller of the two profiles.

Now that the density offset has been determined, the code will find the sum of the squares of the difference between the smaller density profile, and truncated larger density profile. The code will find the centroid value, or center pixel value to divide the column into a left and right line integrated density profile, that minimizes this sum. This will then be the center pixel value, or centroid value, that is used for that column.

-------------------------------------


That center value that minimizes the L2 norm between the smaller and large radial density profiles (the sum of the squares of the differences between the small and truncated large radial density profile) is what will be recorded as the actual inverted radial density profile. Remember that the appropriate density offset was also found for the smaller of the two profiles. So the "Left" and "Right" radial density profiles will be glued together, yielding the 2D inverted plasma radial density profiles.

Finally, the code will apply an axial phase correction. I'm not sure this code is necessary, but here is what it does:


------ Axial Phase Correction -----------

It will start by iterating through each column. 

Then, it will take the longer of the two profiles, and calculate the length = dy x The length of the longer profile. From this length, it will calculate a distance, 2 x sqrt(Relec^2-length^2), which is path length of the edge chord of the longer profile.

Then, it will divide the edge value of the line integrated longer profile of that column, by this distance. This value will then be an offset that is added to the both left and right radial density profiles.


* spectroscopyMonitor

** Introduction

This source code provides a function that will monitor PV's from the FuZE Control System, and attach Callback functions to each PV. The main callback function will search for a .spe file from the Light Field software, and upload the data to an MDSplus database. This is still a work in process.


** To Do

*** TODO Number one

*** TODO Number two

** Issues

*** Issue: Accessing file that does not exist

This source code provides a function that will monitor PV's from the FuZE Control System, and attach Callback functions to each PV. The main callback function will search for a .spe file from the Light Field software, and upload the data to an MDSplus database. This is still a work in process.

Issue: Accessing file that does not exist

There are many current outstanding issues with this soure code. I would like to start documenting them here.

I did see one issues.  Basically, the program tried to read a light field file that didn't exist. But it did not identify the file as not existing, and tried to load a LightField object using the file path. At that time, the LightField class was not checking to see if the file actually existed, so it tried to create the Light Field object, and threw an error. The output in the bash terminal looked like this:

Shot number set to: 190604001
ICCD center wavelength set to: 420
Spectrometer z set to: 0.15
Telescope Angle set to: 3 
ICCD Grating set to: 3
ICCD active slit set to: 1
Light Field Upload to MDSPlus: FuZE:ControlPLC:LightFieldMDSplusUp = 1
Error reading SPE file for frame width
fuze@ops:~/Spectroscopy/Data/190604$ ls
190604002-raw.spe  190604002.spe  190604003-raw.spe  190604003.spe  
190604004-raw.spe  190604004.spe

This section of code should have caught it:

if ( !checkFileExists(shotNumberFileName)) {
  std::cout << "No light field file available for shot number "
     << shotNumber << "\n";
  return;
}

but it did not. The "checkFileExists" function was tested and it worked. I had been seeing issues with the network attached storage drive on which the data resides. Basically, the computer would not recongize that the nas was attached. After running an "ls" command, you would get an error, then the NAS would be visible and accessible again. Not sure if that had something to do with it.


* Interferometry Analysis

** Description

He-Ne Interferometer is a multi-chord (8), heterodyne, quadrature, Mach-Zehnder interferometer.

There are two beams, a scene and a reference beam. The reference beam has an acousto-optical modulator frequency of 80 MHz, meaning it's frequency is shifted up by 80 MHz. The scene beam passes through the plasma, and the reference beam passes over the plasma. The two beams recombine on the detector. Because of the photodetector's time response, the optical frequency (632 nm line, and 473 THz, He-Ne laser) is averaged over by the detector output. The final signal is a DC offset term and a sinusoid:

I_{Detector} = 0.5 *(AS^2 + AR^2) + AS * AR * cos(phi(t) - w_{AOM} * t)

with phi(t) the time varying phase shift in the scene beam from the plasma, and w_{AOM} the frequency offset induced by the acousto-optical modulator. Filtering off the DC term leaves,

A = AS*AR*cos(phi(t) - w_{AOM}*t)

This signal is this split into two components: one replica of the original signal, and one phase shifted by pi/2 radians. This results in two signals:

AC = AS*AR*cos(phi(t) - w_{AOM}*t)
AS = AS*AR*sin(phi(t) - w_{AOM}*t)

At this point, both signals are multiplied (a type of frequency mixing) by the original reference signal that is driving the acousto-optical modulator (AB = Ab*cos(w_{AOM}*t)):

Acos = AC * AB
Asin = AS * AB

Then, these two signals are filtered by 10MHz low pass frequency filters to remove two the frequency components at w_{AOM} and 2*w_{AOM}. Then, the two signals are simply:

Acos = A * cos(phi(t))
Asin = A * sin(phi(t))

The process of Heterodyning is to create a new frequency by mixing two frequencies. In this case, the heterodyne process is adding the small frequency offset to the reference signal, and then recombining the scene and reference beam to produce two frequencies: a fast frequency with a slower beat frequency superimposed over it. The slower beat frequency is the different in the two mixed frequencies. This heterodyne process imposes a beating frequency over the interference pattern. The phase shifting signal is embedded in this beating oscillation. 


For the analysis, we start by taking the baseline data, which would be data from when the laser light was blocked. This data is the cos and sin of the phase shift. Because the laser was blocked, there will be no intereference pattern, and the data should just be clustered around a point, representing the offset in the electronics. By calculating the average value for the cos and sin data, we get the offsets to apply to the interference data.

Once we obtain those offsets, we can apply them to the actual cos and sin data of the phase shift. Once these offsets get applied, we find the initial phase of the signal. This is determined by simply taking the arctangent of the sin/cos of the phase shift at time t = 0.

Then, you take this phase offset, and apply a 2D rotation to the sin (Y) and cos (X) data. This rotation is simply, 
X' = X x cos(initPhase) + Y * sin(initPhase)
Y' = -X x sin(initPhase) + Y * cos(initPhase)

Once that rotation has been applied, smooth the two signals using a box car averge (for now).

After smoothing, you get the phase by simply taking, atan(sin/cos).

Then, you calculate the radius of the lisajou. This is just the square root of the sum of the squares of the cos and sin.

Now, it will go through and do an "unwrapping" procedure, where we ignore any points where the radius is less then 0.01. For all other points, it will first check to see if there has been a phase jump of more then PI. If there has, that point, and all subsequent point, will have 2*pi subtracted from it. Similarly, if there has been a jump of less then -PI, that point and all subsequent points will have 2*pi added to it.

The final step is to convert from the unwrapped phase angle to line integrated density. This is muliplying by a factor, 5.61*1E20 for the 632.8 nm laser wavelength.


* MDSplus PHP

I am working on an mdsplus php extension.

https://www.php.net/manual/en/internals2.structure.php



* Docker

I am trying to use docker to run all this. Here are my notes.

Run with docker image with:

List the images available:
sudo docker images

Run the fuze image:
sudo docker run -it --rm webertr/fuze:latest

List running containers running:
sudo docker ps

List running containers we ran:
sudo docker ps -a

Removes all unused containers and images:
sudo docker image prune

More aggressive (removes everything, I think)
sudo docker image prune -a

To stop a container:
sudo docker stop 74c9ac0b0332

To delete an image:
sudo docker rmi f54e760b76fd

To build a docker image:
sudo docker build -t mdsplus-test 
-t = tag it

To tag a containers as a repository image:
sudo docker tag 727511995d4e webertr/fuze:latest

Then push it into the repository:
sudo docker push webertr/fuze

To login:
docker login --username=webertr

To remove all stopped container:
sudo docker container prune

To run with the host network!
sudo docker run -it --rm --network host webertr/fuze:latest

Here is what the mdsplus docker site says to run scope:
docker run -d --name scope --rm -it --env=DISPLAY --env=QT_X11_NO_MITSHM=1 \
    --volume=/tmp/.X11-unix:/tmp/.X11-unix:rw mdsplus/mdsplus:latest dwscope

-d = detached. Not sure what volume means
-it = interactive, and tty, some interactive process

To mount a directory “/home/fuze/Downloads” in “/home/fuze” as “read only”
--volume=/home/fuze/Downloads:/home/fuze:ro

Mounting all the mdsplus directories from fuze.fuze
sudo docker run --name test --rm -it --volume=/usr/local/UWmdsplus:/usr/local/UWmdsplus:ro --volume=/etc/mdsplus.conf:/etc/mdsplus.conf:ro --volume=/etc/init/mdsip_camac.conf:/etc/init/mdsip_camac.conf:ro --volume=/etc/init/mdsip_dispatch.conf:/etc/init/mdsip_dispatch.conf:ro --volume=/etc/init/mdsip_monitor.conf:/etc/init/mdsip_monitor.conf:ro --volume=/etc/init/mdsip_submit:/etc/init/mdsip_submit:ro webertr/fuze:latest

For environment variables, just make a file:
docker run --env-file=env_file_name alpine env

Where the file just has lines:
env_var_name=another_value

Ultimately, I am looking to run an mdsplus server. That is done with this command:
mdsip -p 8000 -m -h /etc/mdsip.hosts

8000 = port number. 

I had to do this before I connected to a docker test tree in mdsplus:
export docker_tree_path=10.10.10.10:8000::/home/fuze/dockerMDSplusTest

In the “Dockerfile”

RUN executes command(s) in a new layer and creates a new image. E.g., it is often used for installing software packages.

RUN can go in shell or exec form:
RUN apt-get install python3
RUN ["apt-get", "install", "python3"]
Shell processing does not happen in exec form.

To go to a directory or create one:
“WORKDIR /usr/local”

To run “git”:
“RUN git clone https://github.com/MDSplus/mdsplus”

Install things with apt-get like this:

RUN apt-get update
RUN apt-get install -y \
    gfortran \
    gawk \
    default-jre \
    default-jdk


Reference the fuze build with:
FROM webertr/fuze:latest



Here is how it appears I set environment variables. Make a shell script in your folder with the Dockerfile, that has something like:

epics.sh:

#!/bin/sh
# EPICS
PATH=$PATH:/sbin:/usr/local/epics/base/bin/linux-x86_64:/usr/local/epics/extensions/bin/linux-x86_64
export EPICS_HOST_ARCH=linux-x86_64
export EPICS_BASE=/usr/local/epics/base
export EPICS_MODULES=/usr/local/epics/modules
export EPICS_EXTENSIONS=/usr/local/epics/extensions
export EPICS_LOCAL=/usr/local/epics/local
export EPICS_CONFIG=/usr/local/epics/apps/config
export EPICS_HOSTNAME=$(hostname | /usr/bin/cut -f1 -d'-')
export LINUX_HOSTNAME=$(hostname)



Then, include the lines:

WORKDIR /tmp
COPY epics.sh /etc/profile.d/
RUN chmod +x /etc/profile.d/epics.sh
RUN echo ". /etc/profile.d/epics.sh" >> /etc/bash.bashrc


in your Dockerfile.


To run with a host:
sudo docker run --add-host=fuze.fuze:10.10.10.240 -it --rm webertr/fuze:latest



To run with external windows (This does not work at the moment):

sudo docker run --add-host=fuze.fuze:10.10.10.240 -it --rm -e DISPLAY=10.10.10.10:$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix webertr/fuze:latest

